// Generated by CoffeeScript 1.7.1
var CIRCLE_FILL, addNewPapers, addNodes, addPaperById, all_links, all_nodes, cite_data, expandPaper, force, getFill, getRadius, linkSvg, margin, nodeDoubleClicked, nodeSvg, node_data, svg, svgHeight, svgWidth, tickEventHandler, totalHeight, totalWidth, updateGraph;

totalWidth = 1000;

totalHeight = 1000;

margin = {
  top: 10,
  right: 10,
  bottom: 10,
  left: 10
};

svgWidth = totalWidth - margin.left - margin.right;

svgHeight = totalHeight - margin.top - margin.bottom;

svg = d3.select('svg').attr('width', totalWidth).attr('height', totalHeight).selectAll('g').attr('transform', "translate(" + margin.left + "," + margin.top + ")");

nodeSvg = d3.select('.node-canvas');

linkSvg = d3.select('.link-canvas');

CIRCLE_FILL = d3.hsl("#c1ced7");

all_links = [];

all_nodes = [];

node_data = [];

cite_data = [];

d3.json('http://127.0.0.1:8888/sight-of-cite/back-end/api.php?action=get_cite', function(json) {
  return cite_data = json;
});

d3.json('http://127.0.0.1:8888/sight-of-cite/back-end/api.php?action=get_all_paper', function(json) {
  node_data = json;
  return addPaperById("130");
});

tickEventHandler = function() {
  d3.selectAll('.link').attr('x1', function(d) {
    return d.source.x;
  }).attr('x2', function(d) {
    return d.target.x;
  }).attr('y1', function(d) {
    return d.source.y;
  }).attr('y2', function(d) {
    return d.target.y;
  });
  return d3.selectAll('.node').attr('transform', function(d) {
    return "translate(" + d.x + "," + d.y + ")";
  });
};

force = d3.layout.force().charge(-2000).linkDistance(100).linkStrength(0.2).size([svgWidth, svgHeight]).on('tick', tickEventHandler);

updateGraph = function() {
  var links, nodes;
  force.nodes(all_nodes).links(all_links).start();
  nodes = nodeSvg.selectAll('.node').data(all_nodes).enter().append('g').attr('class', 'node').on('dblclick', nodeDoubleClicked).call(force.drag);
  nodes.append('circle').attr('r', getRadius).attr('fill', getFill);
  nodes.append('text').attr('class', '.cite-count-text').attr('y', '0.3em').text(function(d) {
    return d.cite_count;
  });
  nodes.append('text').attr('class', 'title').attr('y', function(d) {
    return getRadius(d) + 20;
  }).text(function(d) {
    return d.title;
  });
  return links = linkSvg.selectAll('.link').data(all_links).enter().append('line').attr('class', 'link');
};

addNodes = function(nodesToAdd) {
  all_nodes = _.uniq(_.flatten([all_nodes, nodesToAdd]), function(d) {
    return d.pub_id;
  });
  all_links = [];
  _.each(all_nodes, function(d) {
    d.tarIds = _.pluck(_.where(cite_data, {
      citer_id: d.pub_id
    }), 'citee_id');
    d.srcIds = _.pluck(_.where(cite_data, {
      citee_id: d.pub_id
    }), 'citer_id');
    _.each(d.tarIds, function(n) {
      var tar;
      tar = _.findWhere(all_nodes, {
        pub_id: n
      });
      if (tar != null) {
        return all_links.push({
          source: d,
          target: tar
        });
      }
    });
    _.each(d.srcIds, function(n) {
      var src;
      src = _.findWhere(all_nodes, {
        pub_id: n
      });
      if (src != null) {
        return all_links.push({
          source: src,
          target: d
        });
      }
    });
    return 0;
  });
  return all_links = _.uniq(all_links, false, function(d) {
    return "" + d.source.pub_id + "-" + d.target.pub_id;
  });
};

addNewPapers = function(papersToAdd) {
  addNodes(papersToAdd);
  return updateGraph();
};

expandPaper = function(paper) {
  var neighbor_ids, papersToAdd;
  papersToAdd = [];
  neighbor_ids = _.pluck(_.flatten([paper.references, paper.citedbys]), 'pub_id');
  papersToAdd = _.filter(node_data, function(d) {
    return _.contains(neighbor_ids, d.pub_id);
  });
  return addNewPapers(papersToAdd);
};

nodeDoubleClicked = function(d) {
  return expandPaper(d);
};

getRadius = function(d) {
  return Math.max(Math.sqrt(parseInt(d.cite_count)), 10);
};

getFill = function(d) {
  var ratio;
  ratio = (d.cite_count / 500) ^ 0.25;
  return CIRCLE_FILL.darker(ratio);
};

addPaperById = function(id) {
  return expandPaper(_.where(node_data, {
    pub_id: id
  })[0]);
};
