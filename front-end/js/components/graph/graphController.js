// Generated by CoffeeScript 1.7.1
angular.module('sightApp').controller('GraphController', function() {
  var CIRCLE_FILL, addNewPapers, addNodes, all_links, all_nodes, force, getFill, getRadius, linkSvg, margin, new_nodes, nodeSvg, svg, svgHeight, svgWidth, tickEventHandler, totalHeight, totalWidth, updateGraph;
  totalWidth = 960;
  totalHeight = 640;
  margin = {
    top: 10,
    right: 10,
    bottom: 10,
    left: 10
  };
  svgWidth = totalWidth - margin.left - margin.right;
  svgHeight = totalHeight - margin.top - margin.bottom;
  CIRCLE_FILL = d3.hsl("#c1ced7");
  svg = d3.select('svg').attr('width', totalWidth).attr('height', totalHeight).selectAll('g').attr('transform', "translate(" + margin.left + "," + margin.top + ")");
  nodeSvg = d3.select('.node-canvas');
  linkSvg = d3.select('.link-canvas');
  new_nodes = [
    {
      id: 1,
      name: 'A',
      cite_count: 35,
      neighbors: [
        {
          id: 2
        }
      ]
    }, {
      id: 2,
      name: 'B',
      cite_count: 2,
      neighbors: [
        {
          id: 3
        }
      ]
    }, {
      id: 3,
      cite_count: 105,
      name: 'C'
    }, {
      id: 1,
      name: 'C'
    }, {
      id: 3,
      name: 'D'
    }
  ];
  all_links = [];
  all_nodes = [];
  tickEventHandler = function() {
    d3.selectAll('.link').attr('x1', function(d) {
      return d.source.x;
    }).attr('x2', function(d) {
      return d.target.x;
    }).attr('y1', function(d) {
      return d.source.y;
    }).attr('y2', function(d) {
      return d.target.y;
    });
    return d3.selectAll('.node').attr('transform', function(d) {
      return "translate(" + d.x + "," + d.y + ")";
    });
  };
  force = d3.layout.force().charge(-2000).linkDistance(100).linkStrength(0.2).size([svgWidth, svgHeight]).on('tick', tickEventHandler);
  updateGraph = function() {
    var links, nodes;
    force.nodes(all_nodes).links(all_links).start();
    nodes = nodeSvg.selectAll('.node').data(all_nodes).enter().append('g').attr('class', 'node').call(force.drag);
    nodes.append('circle').attr('r', getRadius).attr('fill', getFill);
    nodes.append('text').attr('class', 'cite-count').attr('y', '0.3em').text(function(d) {
      return d.cite_count;
    });
    nodes.append('text').attr('class', 'title').attr('y', function(d) {
      return getRadius(d) + 20;
    }).text(function(d) {
      return d.name;
    });
    return links = linkSvg.selectAll('.link').data(all_links).enter().append('line').attr('class', 'link');
  };
  addNodes = function(nodesToAdd) {
    all_nodes = _.uniq(_.flatten([all_nodes, nodesToAdd]), function(d) {
      return d.id;
    });
    all_links = [];
    return _.each(all_nodes, function(d) {
      return _.each(d.neighbors, function(n) {
        var tar;
        tar = _.find(all_nodes, function(d) {
          return d.id === n.id;
        });
        if (tar != null) {
          return all_links.push({
            source: d,
            target: tar
          });
        }
      });
    });
  };
  addNewPapers = function(papersToAdd) {
    addNodes(papersToAdd);
    return updateGraph();
  };
  getRadius = function(d) {
    return Math.max(Math.sqrt(d.cite_count) * 5, 10);
  };
  getFill = function(d) {
    var ratio;
    ratio = Math.sqrt(d.cite_count / 10);
    return CIRCLE_FILL.darker(ratio);
  };
  return addNewPapers(new_nodes);
});
