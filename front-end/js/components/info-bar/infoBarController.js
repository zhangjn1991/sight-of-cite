// Generated by CoffeeScript 1.7.1
angular.module('sightApp').controller("InfoBarController", function($scope) {
  var self;
  self = this;
  $scope.globalCtrl.infoBarCtrl = this;
  this.tabIndex = 0;
  this.entity = {};
  this.isEditing = false;
  this.tempEntityDetail = null;
  this.currentCitationList = [];
  this.citationEntity = {};
  this.isReference = true;
  this.testReferenes = [
    {
      pub_id: 1,
      title: "Test Refereces 1",
      note_content: "Test Note",
      rating: 5,
      note_date: 1429863767
    }, {
      pub_id: 2,
      title: "Test Refereces 2",
      note_content: "Test Note",
      rating: 3,
      note_date: 1429863767
    }, {
      pub_id: 3,
      title: "Test Refereces 3",
      note_content: "Test Note",
      rating: 1,
      note_date: 1429863767
    }
  ];
  this.testCitedbys = [
    {
      pub_id: 1,
      title: "Test Citedbys 1",
      note_content: "Test Note",
      rating: 1,
      note_date: 1429863767
    }, {
      pub_id: 2,
      title: "Test Citedbys 2",
      note_content: "Test Note",
      rating: 3,
      note_date: 1429863767
    }, {
      pub_id: 3,
      title: "Test Citedbys 3",
      note_content: "Test Note",
      rating: 2,
      note_date: 1429863767
    }
  ];
  this.startEdit = function() {
    this.tempEntityDetail = this.tempEntityDetail || {};
    this.overwriteObject(this.entity, this.tempEntityDetail);
    return this.isEditing = true;
  };
  this.saveEdit = function() {
    var actionName, isNewPaper;
    isNewPaper = this.isNewEntity(this.entity);
    this.overwriteObject(this.tempEntityDetail, this.entity);
    this.isEditing = false;
    actionName = isNewPaper ? "add_paper" : "update_paper";
    console.log("AJAX: " + actionName);
    return $.post($scope.globalCtrl.getServerAddr(), {
      action: actionName,
      data: this.entity
    }, function(res) {
      console.log(res);
      if (isNewPaper) {
        return self.entity.pub_id = res.pub_id;
      }
    }, 'json');
  };
  this.cancelEdit = function() {
    this.tempEntityDetail = null;
    return this.isEditing = false;
  };
  this.setCurrentEntity = function(entity) {
    this.entity = entity;
    if (this.isNewEntity(entity)) {
      return this.startEdit();
    } else {
      return this.setCitationList(entity);
    }
  };
  this.removeCurrentEntity = function() {
    return this.entity = {};
  };
  this.overwriteObject = function(fromObj, toObj) {
    var k, v, _results;
    _results = [];
    for (k in fromObj) {
      v = fromObj[k];
      _results.push(toObj[k] = v);
    }
    return _results;
  };
  this.isNewEntity = function(entity) {
    return !((entity != null) && (entity.pub_id != null));
  };
  this.setTabIndex = function(index) {
    return this.tabIndex = index;
  };
  this.setCitationList = function(entity) {
    if ((entity != null)) {
      return this.currentCitationList = this.isReference ? this.testReferenes : this.testCitedbys;
    }
  };
  this.setCitationEntity = function(entity) {
    return this.citationEntity = entity;
  };
  this.setIsReference = function(isReference) {
    this.isReference = isReference;
    return this.setCitationList(this.entity);
  };
  return 0;
});
